// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace MParseFront
{
    using MParse.Core.GrammarElements;
    using MParse.Core;
    using System.Linq;
    using System;
    
    
    #line 1 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class ParserTemplate : ParserCodeGenBase
    {
        public override string TransformText()
        {
            this.Write("namespace ");
            
            #line 5 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_codeNamespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    using System;\r\n    using System.Linq;\r\n    using System.Collections.Gene" +
                    "ric;\r\n\r\n    public class Parser \r\n    {\r\n        public ");
            
            #line 13 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.TreeNode));
            
            #line default
            #line hidden
            this.Write(" Parse(IEnumerable<");
            
            #line 13 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.TerminalBaseClassName));
            
            #line default
            #line hidden
            this.Write(@"> tokens)
        {
            var tokenEnumerator = tokens.GetEnumerator();
            if (!tokenEnumerator.MoveNext())
                throw new ArgumentException(""Cannot access tokens."", ""tokens"");

            var stateStack = new Stack<int>();
            var parseStack = new Stack<");
            
            #line 20 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.TreeNode));
            
            #line default
            #line hidden
            this.Write(@">();
            stateStack.Push(0);

            while(true)
            {
                var t = tokenEnumerator.Current;
                var result = t.Action(stateStack, parseStack);
                if ((result == ActionResult.Accept))
                {
                    break;
                }
                if (result == ActionResult.ShiftContinue)
                {
                    tokenEnumerator.MoveNext();
                    continue;
                }
                if (result == ActionResult.ReduceContinue)
                {
                    var reducer = ((");
            
            #line 38 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.ReductionInterfaceName));
            
            #line default
            #line hidden
            this.Write(@")(parseStack.Peek()));
                    reducer.Goto(stateStack);
                    continue;
                }
                if (result == ActionResult.Error)
                {
                    throw new Exception(""Parsing Failed."");
                }
            }
            return (");
            
            #line 47 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.TreeNode));
            
            #line default
            #line hidden
            this.Write(")parseStack.Pop();\r\n        }\r\n    }\r\n\r\n    public interface IParseTreeVisitor\r\n " +
                    "   {\r\n");
            
            #line 53 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

foreach(var symbol in _symbols)
{
if(symbol is Terminal)
{

            
            #line default
            #line hidden
            this.Write("        void Visit(");
            
            #line 59 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(((Terminal)symbol).Name));
            
            #line default
            #line hidden
            this.Write(" terminal);\r\n");
            
            #line 60 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

}
else
{
foreach(var prod in _productions.Where(x => x.Head == symbol))
{
var className = GetClassName(prod);

            
            #line default
            #line hidden
            this.Write("        void Visit(");
            
            #line 68 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write(" nonTerminal);\r\n");
            
            #line 69 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

}
}
}

            
            #line default
            #line hidden
            this.Write("    }\r\n\r\n\tpublic class TreeVisitor : IParseTreeVisitor\r\n    {\r\n");
            
            #line 78 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

foreach(var symbol in _symbols)
{
if(symbol is Terminal)
{

            
            #line default
            #line hidden
            this.Write("\r\n        public void Visit(");
            
            #line 85 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(((Terminal)symbol).Name));
            
            #line default
            #line hidden
            this.Write(" terminal)\r\n\t\t{\r\n\r\n\t\t}\r\n");
            
            #line 89 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

}
else
{
foreach(var prod in _productions.Where(x => x.Head == symbol))
{
var className = GetClassName(prod);

            
            #line default
            #line hidden
            this.Write("        public void Visit(");
            
            #line 97 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write(" nonTerminal)\r\n\t\t{\r\n");
            
            #line 99 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

for(int i = 0; i < prod.Length; i++)
{

            
            #line default
            #line hidden
            this.Write("\t\t\tnonTerminal.T");
            
            #line 103 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write(".AcceptVisitor(this);\r\n");
            
            #line 104 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("\t\t}\r\n");
            
            #line 108 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

}
}
}

            
            #line default
            #line hidden
            this.Write("    }\r\n\r\n\t\r\n\r\n    public abstract class ");
            
            #line 117 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.TreeNode));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n        private Guid _nodeId;\r\n\r\n        public ");
            
            #line 121 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.TreeNode));
            
            #line default
            #line hidden
            this.Write("()\r\n        {\r\n            _nodeId = Guid.NewGuid();\r\n        }\r\n\r\n        public" +
                    " virtual void AcceptVisitor(IParseTreeVisitor visitor)\r\n        {\r\n            /" +
                    "/No default implementation\r\n        }\r\n    }\r\n    \r\n    public abstract class ");
            
            #line 132 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.TerminalBaseClassName));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 132 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.TreeNode));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n        private string _text;\r\n        \r\n        protected ");
            
            #line 136 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.TerminalBaseClassName));
            
            #line default
            #line hidden
            this.Write(@"(string text)
        {
            _text = text;
        }
        
        public string Text
        {
            get
            {
                return _text;
            }
        }
        
        public abstract ActionResult Action(Stack<int> stateStack, Stack<");
            
            #line 149 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.TreeNode));
            
            #line default
            #line hidden
            this.Write(@"> parseStack);
        
        public override string ToString()
        {
            return _text;
        }
    }

    public enum ActionResult
    {
        Error,
        Accept,
        ShiftContinue,
        ReduceContinue,
    }

    public interface ");
            
            #line 165 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.ReductionInterfaceName));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n        void Goto(Stack<int> stateStack);\r\n    }\r\n\r\n");
            
            #line 170 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

foreach (var symbol in _symbols)
{
if (symbol is Terminal)
{

            
            #line default
            #line hidden
            this.Write("    public partial class ");
            
            #line 176 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(symbol.Name));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 176 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.TerminalBaseClassName));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n        public ");
            
            #line 178 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(symbol.Name));
            
            #line default
            #line hidden
            this.Write("(string text) : base(text)\r\n        {\r\n        }\r\n\r\n\t\tpublic override void Accept" +
                    "Visitor(IParseTreeVisitor visitor)\r\n        {\r\n            visitor.Visit(this);\r" +
                    "\n        }\r\n\r\n        public override ActionResult Action(Stack<int> stateStack," +
                    " Stack<");
            
            #line 187 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.TreeNode));
            
            #line default
            #line hidden
            this.Write("> parseStack)\r\n        {\r\n            int currentState = stateStack.Peek();\r\n");
            
            #line 190 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

foreach (var state in _table.States)
{
var action = _table[state, symbol];
if (action.Action == ParserAction.Error)
{
continue;
}

            
            #line default
            #line hidden
            this.Write("            if(currentState == ");
            
            #line 199 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(state.StateId));
            
            #line default
            #line hidden
            this.Write(")\r\n            {\r\n");
            
            #line 201 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

if (action.Action == ParserAction.Shift)
{

            
            #line default
            #line hidden
            this.Write("                stateStack.Push(");
            
            #line 205 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.NextState.StateId));
            
            #line default
            #line hidden
            this.Write(");\r\n                parseStack.Push(this);\r\n                return ActionResult.S" +
                    "hiftContinue;\r\n");
            
            #line 208 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

}

            
            #line default
            #line hidden
            
            #line 211 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

if (action.Action == ParserAction.Reduce)
{

            
            #line default
            #line hidden
            this.Write("                parseStack.Push(");
            
            #line 215 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetClassName(action.ReduceByProduction)));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 215 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.ReduceByMethodName));
            
            #line default
            #line hidden
            this.Write("(parseStack));\r\n");
            
            #line 216 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

for (int i = 0; i < action.ReduceByProduction.Length; i++)
{

            
            #line default
            #line hidden
            this.Write("                stateStack.Pop();\r\n");
            
            #line 221 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("                return ActionResult.ReduceContinue;\r\n");
            
            #line 225 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

}

            
            #line default
            #line hidden
            
            #line 228 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

if (action.Action == ParserAction.Accept)
{

            
            #line default
            #line hidden
            this.Write("                return ActionResult.Accept;\r\n");
            
            #line 233 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("            }\r\n");
            
            #line 237 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("\t\t\treturn ActionResult.Error;\r\n        }\r\n    }\r\n\r\n");
            
            #line 244 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

}
else
{

            
            #line default
            #line hidden
            this.Write("    public abstract class ");
            
            #line 249 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(symbol.Name));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 249 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.TreeNode));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 249 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.ReductionInterfaceName));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n        public void Goto(Stack<int> stateStack)\r\n        {\r\n            " +
                    "int currentState = stateStack.Peek();\r\n");
            
            #line 254 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

foreach (var state in _table.States)
{
var action = _table[state, symbol];
if (action.Action == ParserAction.Goto)
{

            
            #line default
            #line hidden
            this.Write("            if(currentState == ");
            
            #line 261 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(state.StateId));
            
            #line default
            #line hidden
            this.Write(")\r\n            {\r\n                stateStack.Push(");
            
            #line 263 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.NextState.StateId));
            
            #line default
            #line hidden
            this.Write(");\r\n                return;\r\n            }\r\n");
            
            #line 266 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

}
}

            
            #line default
            #line hidden
            this.Write("            throw new Exception(\"Unexpected GOTO operation.\");\r\n        }\r\n    }\r" +
                    "\n\r\n");
            
            #line 274 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

}
}

            
            #line default
            #line hidden
            
            #line 278 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

foreach(var symbol in _symbols.Where(x => x is NonTerminal))
foreach(var prod in _productions.Where(x => x.Head == symbol ))
{
var className = GetClassName(prod);

            
            #line default
            #line hidden
            this.Write("    public partial class ");
            
            #line 284 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 284 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prod.Head));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n");
            
            #line 286 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

for(int i = 0; i < prod.Length; i++)
{

            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 290 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prod[i].Name));
            
            #line default
            #line hidden
            this.Write(" T");
            
            #line 290 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write(" { get; private set; }\r\n");
            
            #line 291 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("\r\n        private ");
            
            #line 295 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write("(IList<");
            
            #line 295 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.TreeNode));
            
            #line default
            #line hidden
            this.Write("> nodes)\r\n        {\r\n            if(nodes.Count != ");
            
            #line 297 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prod.Length));
            
            #line default
            #line hidden
            this.Write(")\r\n            {\r\n                throw new ArgumentException(\"The list of nodes " +
                    "given is of the wrong length.\", \"nodes\");\r\n            }\r\n");
            
            #line 301 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

for(int i = 0; i < prod.Length; i++)
{

            
            #line default
            #line hidden
            this.Write("            T");
            
            #line 305 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write(" = (");
            
            #line 305 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prod[i].Name));
            
            #line default
            #line hidden
            this.Write(")nodes[");
            
            #line 305 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write("];\r\n");
            
            #line 306 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n        public static ");
            
            #line 311 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 311 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.ReduceByMethodName));
            
            #line default
            #line hidden
            this.Write("(Stack<");
            
            #line 311 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.TreeNode));
            
            #line default
            #line hidden
            this.Write("> parseStack)\r\n        {\r\n            //reverse the nodes because they are popped" +
                    " off in the inverted order.\r\n            var nodes = new ");
            
            #line 314 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.TreeNode));
            
            #line default
            #line hidden
            this.Write("[]\r\n            {\r\n");
            
            #line 316 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

for(int i = 0; i < prod.Length; i++)
{

            
            #line default
            #line hidden
            this.Write("                parseStack.Pop(),\r\n");
            
            #line 321 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("            }.Reverse().ToArray();\r\n            return new ");
            
            #line 325 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write("(nodes);\r\n        }\r\n\r\n\t\tpublic override void AcceptVisitor(IParseTreeVisitor vis" +
                    "itor)\r\n        {\r\n            visitor.Visit(this);\r\n        }\r\n    }\r\n\r\n");
            
            #line 334 "C:\Projects\MParse\MParseFront\ParserTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("} //End Namespace\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
